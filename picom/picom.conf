#################################
#             Shadows           #
#################################

shadow = false;

# defaults to 12
shadow-radius = 10;

# 0.0 - 1.0, defaults to 0.75
# shadow-opacity = .75

# the left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = -6;

# the top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = -7;

# Avoid drawing shadows on dock/panel windows. This option is deprecated,
#no-dock-shadow = false

# don't draw shadows on drag-and-drop windows. This option is deprecated, 
# you should use the *wintypes* option in your config file instead.
#no-dnd-shadow = true

# 0.0 - 1.0, defaults to 0
# shadow-red = 0
# shadow-green = 0
# shadow-blue = 0

shadow-exclude = [
#  "name = 'Notification'",
#  "class_g = 'Conky'",
#  "class_g ?= 'Notify-osd'",
#  "class_g = 'Cairo-clock'",
#  "_GTK_FRAME_EXTENTS@:c"
];

# specify a X geometry that describes the region in which shadow should not
# be painted in, such as a dock window region. Use 
#    shadow-exclude-reg = "x10+0+0"
# for example, if the 10 pixels on the bottom of the screen should not have shadows painted on.

# crop shadow of a window fully on a particular xinerama screen to the screen.
# xinerama-shadow-crop = false


#################################
#           Fading              #
#################################

fading = true

# 0.01 - 1.0, defaults to 0.028
fade-in-step = 0.05;

# 0.01 - 1.0, defaults to 0.03
fade-out-step = 0.05;

# the time between steps in fade step, in milliseconds. (> 0, defaults to 10)
# fade-delta = 10

# specify a list of conditions of windows that should not be faded.
# fade-exclude = []

# do not fade on window open/close.
# no-fading-openclose = false

# do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
# no-fading-destroyed-argb = false


#################################
#   Transparency / Opacity      #
#################################

# opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
# inactive-opacity = 1
inactive-opacity = 1.0;

# 0.1 - 1.0, disabled by default
# frame-opacity = 1.0

# 0.0 - 1.0, defaults to 1.0
# menu-opacity = 1.0

# let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
inactive-opacity-override = false;

# 0.0 - 1.0, defaults to 1.0
active-opacity = 1.0

# 0.0 - 1.0, defaults to 0.0
inactive-dim = 0.0

# focus-exclude = [ "class_g = 'Cairo-clock'" ];

# use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0

# opacity-rule = [ "80:class_g = 'URxvt'" ];

#################################
#       General Settings        #
#################################

# daemonize process. fork to background after initialization. causes issues with certain (badly-written) drivers.
# daemon = false

# specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
backend = "glx";

vsync = true

# dbus = false

# try to detect WM windows (a non-override-redirect window with no 
# child that has 'WM_STATE') and mark them as active.
mark-wmwin-focused = true;

# mark override-redirect windows that doesn't have a child window with 'WM_STATE' focused.
mark-ovredir-focused = false;

# try to detect windows with rounded corners and don't consider them 
# shaped windows. the accuracy is not very high, unfortunately.
detect-rounded-corners = false;

# detect '_NET_WM_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_OPACITY' of client windows to frame windows.
detect-client-opacity = false;

# specify refresh rate of the screen. if not specified or 0, picom will 
# try detecting this with X RandR extension.
refresh-rate = 0

# unredirect all windows if a full-screen opaque window is detected, 
# crashes on my current pc (k55vd)
unredir-if-possible = false
unredir-if-possible-delay = 0
# unredir-if-possible-exclude = []

# use 'WM_TRANSIENT_FOR' to group windows, and consider windows 
# in the same group focused at the same time.
detect-transient = true

# use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same 
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if 
# detect-transient is enabled, too.
detect-client-leader = true

# resize damaged region by a specific number of pixels. 
# a positive value enlarges it while a negative one shrinks it. 
# if the value is positive, those additional pixels will not be actually painted 
# to screen, only used in blur calculation, and such. (due to technical limitations, 
# with use-damage, those pixels will still be incorrectly painted to screen.) 
# primarily used to fix the line corruption issues of blur, 
# in which case you should use the blur radius value here 
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`, 
# with a 5x5 one you use `--resize-damage 2`, and so on). 
# may or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
#
# resize-damage = 1

# invert-color-include = [ 
# 	"class_g = 'Polybar'",
# 	"class_g = 'Chromium'",
# 	"class_g = 'URxvt'",
# 	"class_g = 'Dunst'",
# ];

# GLX backend: avoid using stencil buffer, useful if you don't have a stencil buffer. 
# might cause incorrect opacity when rendering transparent content (but never 
# practically happened) and may not work with blur-background. 
# my tests show a 15% performance boost. recommended.
#
glx-no-stencil = true

# GLX backend: avoid rebinding pixmap on window damage. 
# probably could improve performance on rapid window content changes, 
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# recommended if it works.
#
glx-no-rebind-pixmap = false

# disable the use of damage information. 
# this cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
# use-damage = true

# use X Sync fence to sync clients' draw calls, to make sure all draw 
# calls are finished before picom starts drawing. needed on nvidia-drivers 
# with GLX backend for some users.
#
# xrender-sync-fence = false

# GLX backend: use specified GLSL fragment shader for rendering window contents. 
# see `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl` 
# in the source tree for examples.
#
# glx-fshader-win = ''

# force all windows to be painted with blending. useful if you 
# have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = false

# do not use EWMH to detect fullscreen windows. 
# reverts to checking if a window is fullscreen based only on its size and coordinates.
#
# no-ewmh-fullscreen = false

# dimming bright windows so their brightness doesn't exceed this set value. 
# brightness of a window is estimated by averaging all pixels in the window, 
# so this could comes with a performance hit. 
# setting this to 1.0 disables this behaviour. requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

# make transparent windows clip other windows like non-transparent windows do,
# instead of blending on top of them.
#
# transparent-clipping = false

# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case doesn't matter. 
# If using the "TRACE" log level, it's better to log into a file 
# using *--log-file*, since it can generate a huge stream of logs.
#
# log-level = "debug"
log-level = "warn";

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr. 
# Otherwise, logs will to written to the given file, though some of the early 
# logs might still be written to the stderr. 
# When setting this option from the config file, it is recommended to use an absolute path.
#
# log-file = '/home/skarphet/picom.log'

# Show all X errors (for debugging)
# show-all-xerrors = false

# Write process ID to a file.
# write-pid-path = '/path/to/your/log/file'

# Window type settings
# 
# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard: 
#     "unknown", "desktop", "dock", "toolbar", "menu", "utility", 
#     "splash", "dialog", "normal", "dropdown_menu", "popup_menu", 
#     "tooltip", "notification", "combo", and "dnd".
# 
# Following per window-type options are available: ::
# 
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
# 
#   opacity:::
#     Controls default opacity of the window type.
# 
#   focus:::
#     Controls whether the window of this type is to be always considered focused. 
#     (By default, all window types except "normal" and "dialog" has this on.)
# 
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you 
#     normally won't be able to see. Useful when the window has parts of it 
#     transparent, and you want shadows in those areas.
# 
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become 
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection, 
#     you can set this to `true`.
#
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 1.0; }
  dropdown_menu = { opacity = 1.0; }
};
